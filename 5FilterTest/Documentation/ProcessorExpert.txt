=============================================================================
List of generated methods in project: ProcessorExpert

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "powerLED"  (component BitIO)
   - powerLED_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - powerLED_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - powerLED_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - powerLED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - powerLED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "statusLED" (component BitIO)
   - statusLED_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - statusLED_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - statusLED_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - statusLED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - statusLED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "Accelerometer1" (component ADC)
   - Accelerometer1_Enable -Enables A/D converter component. <Events> may be generated (<DisableEvent>/<EnableEvent>). If 
                possible, this method switches on A/D converter device, voltage reference, etc.
   - Accelerometer1_Disable -Disables A/D converter component. No <events> will be generated. If possible, this method switches 
                off A/D converter device, voltage reference, etc.
   - Accelerometer1_EnableEvent -Enables the <events>.
   - Accelerometer1_DisableEvent -Disables the <events>.
   - Accelerometer1_Measure -This method performs one measurement on all channels that are set in the component inspector. 
                (Note: If the <number of conversions> is more than one the conversion of A/D channels is performed specified 
                number of times.)
   - Accelerometer1_GetValue16 -This method returns the last measured values of all channels justified to the left. Compared 
                with <GetValue> method this method returns more accurate result if the <number of conversions> is greater than 
                1 and <AD resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is 
                eliminated.

Module "sampleTimer" (component TimerInt)
   - sampleTimer_Enable -This method enables the component - it starts the timer. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - sampleTimer_Disable -This method disables the component - it stops the timer. No events will be generated.

Module "Cpu"       (component MC9S08JM60_64)
   - Cpu_EnableInt -Enables maskable interrupts
   - Cpu_DisableInt -Disables maskable interrupts

===================================================================================
