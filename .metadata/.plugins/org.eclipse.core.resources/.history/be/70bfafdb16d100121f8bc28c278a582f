/** ###################################################################
 **     Filename    : ProcessorExpert.c
 **     Project     : ProcessorExpert
 **     Processor   : MC9S08JM60CLHE
 **     Version     : Driver 01.12
 **     Compiler    : CodeWarrior HCS08 C Compiler
 **     Date/Time   : 2013-05-27, 11:04, # CodeGen: 0
 **     Abstract    :
 **         Main module.
 **         This module contains user's application code.
 **     Settings    :
 **     Contents    :
 **         No public methods
 **
 ** ###################################################################*/
/* MODULE ProcessorExpert */

/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "Events.h"
#include "powerLED.h"
#include "statusLED.h"
/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

/* User includes (#include below this line is not maintained by Processor Expert) */

#include "SPI.h"
#include "Fat.h"

// Number of for-count cycles in a millisecond
const int TIME_FACTOR = 2; 
int sdStatus;

/**
 * Pause the program for a specified amount of time.
 * @param milliseconds Delay period in milliseconds.
 */
void delay(unsigned long milliseconds) {
	int i;
	for (i = 0; i < (milliseconds * TIME_FACTOR); i++) {
		//Do a bit of nothing
	}
}

/***********************************************************************
*
*    vfnSDwelcome
*
*  Description: Checks if SD Card present - if not ?????
*               If Card is present: 
*                  If file "FILE.TXT" exists it is opened,
*                  If file does not exist it is created and opened.
*                  File is then closed.
*
*               Called from main() in SD_Card_Writer.c
*
*************************************************************************/
void vfnSDwelcome(void){
  UINT8 result;
  UINT16 i;
  
  
  /* Check if SD card present - if not ????? */ 
  if (u8sd_status == NO_SD_CARD)   // Status set by SD_Init() in SD.c.
  {
    /* SD Card not present */
    Cpu_DisableInt();     // Disable interrupts
    ErrorPulse3(4);
    for(;;);             // Debug trap
  }   
  else
  {
    /* SD Card present, read the Master Block (Boot Sector) of the memory */
    FAT_Read_Master_Block();                        // in Fat.c
    
    /* Make sure file "FILE.TXT" exists */
    u8sd_status = FAT_FileOpen("FILE.TXT",MODIFY);  // Attempt to open file
      
    /* Does file exist? */
    if (u8sd_status == FILE_NOT_FOUND) 
    {
      /* If the file does not exist, it is created */
      u8sd_status = FAT_FileOpen("FILE.TXT",CREATE);
      // Valid u8sd_status == FILE_CREATE_OK
      
      /*** Set up the FAT to a file of 11,000 clusters which is approx
             11,000 clusters * 32768 bytes/cluster = 360,448kB, or
             360,448kB / 31 bytes/sample = 11,627,354 samples, or
             11,627,354 samples / 2,000 samples/sec = 5,814 seconds of sampling, or
             approx 1.61 hours of samples. ***/
             
       /* Set "u32DataSector" to the first data sector to be written.
          u32DataSector is used in function FAT_DataSectorWrite() in Fat.c
             for writing a block of data to the SD card. */
    
       /* Create the file FAT */
       for(i=0;i<11000;i++)
       {
      
          (void)FAT_Entry(WHandler.CurrentFatEntry,WHandler.CurrentFatEntry + 1,WRITE_ENTRY);
          WHandler.CurrentFatEntry++;
          WHandler.File_Size += 32768;        // update the file size, 32768 bytes per cluster
       }
           
    }
    
       /* Use this to append to an existing file */
//       u32DataSector= u16FAT_Data_BASE + WHandler.ClusterIndex + (WHandler.CurrentFatEntry-2)*u16FAT_Cluster_Size;
       
       /* Use this to place the first data block at the start of the SD Card data region. */
       u32DataSector = u16FAT_Data_BASE;
    
            
    /* Erase the SD Card data area. Return OK if successful. */
//    result = SD_Erase_Blocks(u16FAT_Data_BASE,u16FAT_Data_BASE + 8192); // 4MB
    result = SD_Erase_Blocks(u16FAT_Data_BASE,u16FAT_Data_BASE + 2000000); // 1GB
//    result = SD_Erase_Blocks(0x4000,0x4000 + 500);
    if(result != OK)
    {
      FAT_FileClose();
      ErrorPulse3(5);
      for(;;);
    }
    
    /* Close file */
    FAT_FileClose(); 
    
    //This part sets the initial values of these variables
    u16buffer_index = 0;
    u8sd_command = SD_INACTIVE;     
  }
}

void main(void) {
	/* Write your local variable definition here */

	/*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
	PE_low_level_init();
	/*** End of Processor Expert internal initialization.                    ***/

	/* Write your code here */
	initialiseSD();
	formatSDCard();
	togglePowerLED();
	statusLED_ClrVal();
	

	/*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END ProcessorExpert */
/*
 ** ###################################################################
 **
 **     This file was created by Processor Expert 10.0 [05.03]
 **     for the Freescale HCS08 series of microcontrollers.
 **
 ** ###################################################################
 */
