/******************************************************************************
 *                                                  
 *
 *  File Name:   SPI.c
 *
 *  Project:     Helicopter Vibration measurement
 *               Basket Vibration Controller Board
 *               SPI2 interface for controlling the SD Card.
 *                                                                          
 *  Description: SD Card using SPI Driver
 *
 *  Processor:   MC9S08JM60CLD 
 *                                                                                     
 *  Assembler:   Codewarrior for HC(S)08 V6.3
 *                                            
 *  Version:     1.0                                                         
 *                                                                                                                                                         
 *  Author:      Peter Grabau
 *                                                                                       
 *  Location:    Townsville                                              
 *                                                                                                                  
 *                                                  
 * UPDATED HISTORY:
 *
 * REV   YYYY.MM.DD  AUTHOR        DESCRIPTION OF CHANGE
 * ---   ----------  ------        --------------------- 
 * 1.0   2011.01.14  Peter Grabau  Initial version
 *
 ******************************************************************************/
/*****************************************************************************
 *
 **  Setup:
 **
 ***         Serial channel              : SPI2
 **
 **         Protocol
 **             Init baud rate          : 375kHz (low speed)
 **             Clock edge              : falling
 **             Width                   : 8 bits
 **             Empty character         : 0
 **             Empty char. on input    : RECEIVED
 **
 **         Registers
 **             Input buffer            : SPI2DL    [$0075]
 **             Output buffer           : SPI2DL    [$0075]
 **             Control register        : SPI2C1    [$0070]
 **             Mode register           : SPI2C2    [$0071]
 **             Baud setting reg.       : SPI2BR    [$0072]
 **
 **
 **
 **         Used pins                   :
 **         ----------------------------------------------------------
 **              Function    | On package |    Name
 **         ----------------------------------------------------------
 **               Input      |     23     |  PTB0_MISO2_ADP0
 **               Output     |     24     |  PTB1_MOSI2_ADP1
 **               Clock      |     25     |  PTB2_SPSCK2_ADP2
 **         ----------------------------------------------------------

 * 
 ******************************************************************************/

#include "SPI.h"

/**
 * Initialise the SPI port for use with the on-board SD Card reader.
 */
void initialiseSdSerial(void) {
	// Initialise SD Card Chip Select - Connected to PTB3/SS2
	SPI_SS = DISABLE; // SD Card disabled (CS high)
	_SPI_SS = _OUT; // PTB3 as an output

	// Set up SPI2 for > 6MHz operation
	SOPT2_SPI2FE = 0; // Disable SPI2 input filters
	PTBDS_PTBDS1 = 1; // High output drive strength for PTB1/MOSO2/
	PTBDS_PTBDS2 = 1; // PTB2/SPSCK2

	// WHY???
	(void) SPI2S; /* Dummy read of the status register */
	(void) SPI2DL; /* Dummy read of the device register */

	/* SPI2BR: 
	 * NULL = 0
	 * SPPR2 = 0	// Baud prescaler divisor
	 * SPPR1 = 0
	 * SPPR0 = 0
	 * NULL = 0
	 * SPR2 = 1		// Baud rate divisor = 64
	 * SPR1 = 0
	 * SPR0 = 1
	 */
	//Set the baud rate register to the initialisation rate of 375kHz.
	SPI2BR = 0x05;

	/* SPI2C1: 
	 * SPIE = 0		// Receive buffer & mode fault interrupts disabled
	 * SPE = 0		// SPI system inactive
	 * SPTIE = 0	// Transmit buffer empty interrupts disabled
	 * MSTR = 1		// Operate in master mode
	 * CPOL = 0		// Active high (idles low)
	 * CPHA = 0		// Data sampled on rising edge
	 * SSOE = 0		// Slave select output disabled
	 * LSBFE = 0	// Transfer starts with most significant bit
	 */
	// Configure port for master mode, MSB first, Clock mode 0
	SPI2C1 = 0x10;

	/* SPI2C2:
	 * SPMIE = 0	// Interrupts disabled (polling)
	 * SPIMODE = 0	// 8-bit mode
	 * NULL = 0
	 * MODFEN = 0	// Mode fault function disabled
	 * BIDIROE = 0	// Bidirectional mode disabled
	 * NULL = 0
	 * SPISWAI = 0	// Continue operation in wait mode
	 * SPC0 = 0 	// Separate pins for I/O
	 */
	// Configure port in 4-pin mode
	SPI2C2 = 0x00;

	SPI2C1_SPE = 1; /* Enable device */
}

/**
 * Transmit a byte over the SD serial link (SPI2)
 */
void sendByteSdSerial(UINT8 data) {
	waitForSerialEmpty();
	SPI2DL = data;	// Write data to transmit register.
	waitForSerialEmpty();
}

/**
 * Wait until the transmit data register is empty.
 * Caution - This is a blocking function
 */
void waitForSerialEmpty(){
	while (!SPI2S_SPTEF){
	}
}


/***********************************************************************
 *
 *    SPI_Receive_byte
 *
 *  Description: Function receives a byte from SPI2.
 *               1. Receive data register is cleared.
 *               2. A dummy byte (0xFF) is transmitted.
 *               3. When the receive data register is full it is read.
 *
 *************************************************************************/
UINT8 SPI_Receive_byte(void) {
	(void) SPI2DL; // Clear the receive data register
	SPI2DL = 0xFF; // Transmit dummy byte (0xFF)
	while (!SPI2S_SPRF) {
	}; // Wait for byte to be received.
	return (SPI2DL); // Read received byte
}

/***********************************************************************
 *
 *    SPI_High rate
 *
 *  Description: Function sets the SPI2 clock rate to 4MHz.
 *               This is the SPI-SD Card operational clock rate after
 *               initialisation.
 *
 *************************************************************************/
void SPI_High_rate(void) {
	SPI2C1_SPE = 0; // Disable SPI2
	//SPI2BR = 0x20;        // SPI2 clock rate 4MHz for 24 Mhz bus clock 
	SPI2BR = 0x00; // SPI2 clock rate 12MHz for 24 Mhz bus clock      		

	SPI2C1_SPE = 1; // Enable SPI2
}
