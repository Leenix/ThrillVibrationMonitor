/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : massStorageSerial.h
**     Project     : ProcessorExpert
**     Processor   : MC9S08JM60CLDE
**     Component   : AsynchroMaster
**     Version     : Component 02.288, Driver 01.33, CPU db: 3.00.048
**     Compiler    : CodeWarrior HCS08 C Compiler
**     Date/Time   : 2013-05-27, 12:03, # CodeGen: 7
**     Abstract    :
**         This component "AsynchroMaster" implements MASTER part of asynchronous
**         serial master-slave communication.
**     Settings    :
**         Asynchro type               : MASTER
**
**         Serial channel              : SCI2
**
**         Protocol
**             Init baud rate          : 375000baud
**             Width                   : 9 bits
**             Stop bits               : 0
**             Parity                  : hardware wake-up
**             Breaks                  : Disabled
**             Input buffer size       : 0
**             Output buffer size      : 0
**
**         Registers
**             Input buffer            : SCI2D     [$0047]
**             Output buffer           : SCI2D     [$0047]
**             Control register        : SCI2C1    [$0042]
**             Mode register           : SCI2C2    [$0043]
**             Baud setting reg.       : SCI2BD    [$0040]
**             Special register        : SCI2S1    [$0044]
**
**
**
**         Used pins:
**         ----------------------------------------------------------
**           Function | On package           |    Name
**         ----------------------------------------------------------
**            Input   |     44               |  PTC5_RxD2
**            Output  |     43               |  PTC3_TxD2
**         ----------------------------------------------------------
**
**     Contents    :
**         RecvChar        - byte massStorageSerial_RecvChar(massStorageSerial_TComData *Chr);
**         SendChar        - byte massStorageSerial_SendChar(massStorageSerial_TComData Chr);
**         GetCharsInRxBuf - word massStorageSerial_GetCharsInRxBuf(void);
**         GetCharsInTxBuf - word massStorageSerial_GetCharsInTxBuf(void);
**         SelectSlave     - byte massStorageSerial_SelectSlave(byte Slv);
**         GetSelected     - byte massStorageSerial_GetSelected(byte *Slv);
**         SetIdle         - byte massStorageSerial_SetIdle(void);
**
**     Copyright : 1997 - 2012 Freescale, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __massStorageSerial
#define __massStorageSerial

/* MODULE massStorageSerial. */

#include "Cpu.h"


#define NOSLAVE 255U                   /* No slave selected */

#ifndef __BWUserType_massStorageSerial_TError
#define __BWUserType_massStorageSerial_TError
  /*lint -save  -esym(960,18.4) Disable MISRA rule (18.4) checking. */
  typedef union {
    byte err;
    struct {
      /*lint -save  -e46 Disable MISRA rule (6.4) checking. */
      bool OverRun  : 1;               /* Overrun error flag */
      bool Framing  : 1;               /* Framing error flag */
      bool Parity   : 1;               /* Parity error flag */
      bool RxBufOvf : 1;               /* Rx buffer full error flag */
      bool Noise    : 1;               /* Noise error flag */
      bool Break    : 1;               /* Break detect */
      bool LINSync  : 1;               /* LIN synchronization error */
      /*lint -restore Enable MISRA rule (6.4) checking. */
    } errName;
  } massStorageSerial_TError;          /* Error flags. For languages which don't support bit access is byte access only to error flags possible. */
  /*lint -restore  +esym(960,18.4) Enable MISRA rule (18.4) checking. */
#endif

#ifndef __BWUserType_massStorageSerial_TComData
#define __BWUserType_massStorageSerial_TComData
  typedef byte massStorageSerial_TComData ; /* User type for communication. Size of this type depends on the communication data width. */
#endif



byte massStorageSerial_RecvChar(massStorageSerial_TComData *Chr);
/*
** ===================================================================
**     Method      :  massStorageSerial_RecvChar (component AsynchroMaster)
**
**     Description :
**         If any data is received, this method returns one character,
**         otherwise it returns an error code (it does not wait for
**         data). This method is enabled only if the receiver property
**         is enabled.
**         [Note:] Because the preferred method to handle error and
**         break exception in the interrupt mode is to use events
**         <OnError> and <OnBreak> the return value ERR_RXEMPTY has
**         higher priority than other error codes. As a consequence the
**         information about an exception in interrupt mode is returned
**         only if there is a valid character ready to be read.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - Pointer to a received character
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_RXEMPTY - No data in receiver
**                           ERR_BREAK - Break character is detected
**                           (only when the <Interrupt service> property
**                           is disabled and the <Break signal> property
**                           is enabled)
**                           ERR_COMMON - common error occurred (the
**                           GetError method can be used for error
**                           specification)
** ===================================================================
*/

byte massStorageSerial_SendChar(massStorageSerial_TComData Chr);
/*
** ===================================================================
**     Method      :  massStorageSerial_SendChar (component AsynchroMaster)
**
**     Description :
**         Send one character to the channel. This method is available
**         only if the transmitter property is enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Chr             - Character to send
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_TXFULL - Transmitter is full
** ===================================================================
*/

#define massStorageSerial_GetCharsInRxBuf() \
((word) SCI2S1_RDRF)                   /* Return number of chars in receive buffer */
/*
** ===================================================================
**     Method      :  massStorageSerial_GetCharsInRxBuf (component AsynchroMaster)
**
**     Description :
**         Returns the number of characters in the input buffer. This
**         method is available only if the receiver property is enabled.
**     Parameters  : None
**     Returns     :
**         ---             - The number of characters in the input
**                           buffer.
** ===================================================================
*/

#define massStorageSerial_GetCharsInTxBuf() \
(SCI2S1_TDRE ? (word)0U : (word)1U)    /* Return number of chars in the transmitter buffer */
/*
** ===================================================================
**     Method      :  massStorageSerial_GetCharsInTxBuf (component AsynchroMaster)
**
**     Description :
**         Returns the number of characters in the output buffer. This
**         method is available only if the transmitter property is
**         enabled.
**     Parameters  : None
**     Returns     :
**         ---             - The number of characters in the output
**                           buffer.
** ===================================================================
*/

byte massStorageSerial_SelectSlave(byte Slv);
/*
** ===================================================================
**     Method      :  massStorageSerial_SelectSlave (component AsynchroMaster)
**
**     Description :
**         Select the slave - sends the address of the slave for
**         starting communication with it (the previous slave stops
**         communicating).
**     Parameters  :
**         NAME            - DESCRIPTION
**         Slv             - The new slave identification
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - This device is disabled
**                           ERR_BUSY - Transmitter buffer is not empty
** ===================================================================
*/

byte massStorageSerial_GetSelected(byte *Slv);
/*
** ===================================================================
**     Method      :  massStorageSerial_GetSelected (component AsynchroMaster)
**
**     Description :
**         Return the identification of the selected slave  (0-254, or
**         -1 if no slave is selected).
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Slv             - Pointer to identification of the slave
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_NOTAVAIL - Slave is not selected yet
** ===================================================================
*/

void massStorageSerial_Init(void);
/*
** ===================================================================
**     Method      :  massStorageSerial_Init (component AsynchroMaster)
**
**     Description :
**         Initializes the associated peripheral(s) and the component's 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

byte massStorageSerial_SetIdle(void);
/*
** ===================================================================
**     Method      :  massStorageSerial_SetIdle (component AsynchroMaster)
**
**     Description :
**         Sends the idle character to the output line.
**         This method is available only if the transmitter property is
**         enabled.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - This component is disabled
**                           by user
** ===================================================================
*/


/* END massStorageSerial. */

/*
** ###################################################################
**
**     This file was created by Processor Expert 10.0 [05.03]
**     for the Freescale HCS08 series of microcontrollers.
**
** ###################################################################
*/

#endif /* ifndef __massStorageSerial */
