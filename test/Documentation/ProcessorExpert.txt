=============================================================================
List of generated methods in project: ProcessorExpert

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "massStorageSerial" (component AsynchroMaster)
   - massStorageSerial_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code 
                (it does not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because 
                the preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - massStorageSerial_SendChar -Send one character to the channel. This method is available only if the transmitter property 
                is enabled.
   - massStorageSerial_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if 
                the receiver property is enabled.
   - massStorageSerial_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if 
                the transmitter property is enabled.
   - massStorageSerial_SelectSlave -Select the slave - sends the address of the slave for starting communication with it (the 
                previous slave stops communicating).
   - massStorageSerial_GetSelected -Return the identification of the selected slave  (0-254, or -1 if no slave is selected).
   - massStorageSerial_SetIdle -Sends the idle character to the output line.   This method is available only if the transmitter 
                property is enabled.

Module "wirelessSerial" (component SynchroMaster)
   - wirelessSerial_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code 
                (it does not wait for data).   For information about SW overrun behavior please see <General info page>.
   - wirelessSerial_SendChar -Sends one character to the channel.
   - wirelessSerial_GetCharsInRxBuf -Returns the number of characters in the input buffer.  Note: If the Interrupt service is 
                disabled, and the Ignore empty character is set to yes, and a character has been received, then this method 
                returns 1 although it was an empty character.
   - wirelessSerial_GetCharsInTxBuf -Returns the number of characters in the output buffer.
   - wirelessSerial_GetError -Returns a set of errors on the channel (errors that cannot be returned in given methods). The 
                component accumulates errors in a set; after calling [GetError] this set is returned and cleared. This method 
                is available only if the "Interrupt service/event" property is enabled.

Module "powerLED"  (component BitIO)
   - powerLED_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - powerLED_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - powerLED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - powerLED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "statusLED" (component BitIO)
   - statusLED_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - statusLED_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - statusLED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - statusLED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "transmitLED" (component BitIO)
   - transmitLED_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - transmitLED_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - transmitLED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - transmitLED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "receiveLED" (component BitIO)
   - receiveLED_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - receiveLED_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - receiveLED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - receiveLED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "accelerometer" (component ADC)
   - accelerometer_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note:
                If the <number of conversions> is more than one the conversion of A/D channels is performed specified number of 
                times.)
   - accelerometer_GetValue16 -This method returns the last measured values of all channels justified to the left. Compared 
                with <GetValue> method this method returns more accurate result if the <number of conversions> is greater than 
                1 and <AD resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is 
                eliminated.

Module "batteryMonitor" (component ADC)
   - batteryMonitor_Measure -This method performs one measurement on all channels that are set in the component inspector. 
                (Note: If the <number of conversions> is more than one the conversion of A/D channels is performed specified 
                number of times.)
   - batteryMonitor_GetValue16 -This method returns the last measured values of all channels justified to the left. Compared 
                with <GetValue> method this method returns more accurate result if the <number of conversions> is greater than 
                1 and <AD resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is 
                eliminated.

Module "samplingTimer" (component TimerInt)

Module "Cpu"       (component MC9S08JM60_44)
   - Cpu_EnableInt -Enables maskable interrupts
   - Cpu_DisableInt -Disables maskable interrupts

===================================================================================
